---
title: "MEK-Analyse" 
author: "Laura Kiemes & Benjamin Dornow"
format: html
editor: visual
toc: true
toc-depth: 2
---

[![](https://www.die-luchse.de/wp-content/uploads/2024/02/Logo-MEK-Wappen.png){fig-alt="MEK Wappen" width="50"}](https://www.die-luchse.de/)

# Setup

```{r setup}
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(
  tidyverse, ggplot2, readr, haven, readxl, here, dplyr, lubridate, patchwork, ggthemes
  )

here::i_am("analyze.qmd")

darkyellow <- "#FAD514"
darkgrey <- "#1D1D1B"

theme_set(theme_minimal())
```

# Data Teamstats

```{r data teamstats}
### Teamstats importieren

teamstats_total <- read_xlsx(
  here::here("2023-bis-2025-Teamstatistiken-R.xlsx"), 
  sheet = 1
  )

codebook_teamstats <- read_xlsx(
  here::here("2023-bis-2025-Teamstatistiken-R.xlsx"), 
  sheet = 2
  )

# Test for two 24/25 games
# teamstats_total[1, "season"] <- 2425
# teamstats_total[1, "date"] <- 20241030
# teamstats_total[2, "season"] <- 2425
# teamstats_total[2, "date"] <- 20250105

### Erster Überblick

head(teamstats_total)
str(teamstats_total)
```

# Data Wrangling Teamstats

```{r data-wrangling teamstats}


### Gegner in Kategorien aufteilen

teamstats_total <- teamstats_total |> 
  mutate(
    oppcat = case_when(
      opptabelle %in% 1:2 ~ 1,
      opptabelle %in% 3:6 ~ 2,
      opptabelle %in% 7:10 ~ 3
      ),
    win = case_when(
      pts %in% 0:1 ~ 0,
      pts %in% 2:3 ~ 1,
    ),
    wintype = factor(
      pts,
      levels = c(0:3),
      labels = c("Niederlage", "Niederlage nach SO", "Sieg nach SO", "Sieg")
    ),
    oppcat = factor(
      oppcat, 
      levels = c(1:3), 
      labels = c("hoch (Playoffs)", "mittel", "niedrig")
      ),
    opp = case_when(
      opp == "eva" ~ "EV Aich",
      opp == "ega" ~ "Augsburg",
      opp == "dor1b" ~ "Dorfen 1B",
      opp == "esvd" ~ "Dachau",
      opp == "esvg" ~ "Gebensbach",
      opp == "evk" ~ "Königsbrunn",
      opp == "ffb1b" ~ "FFB 1B",
      opp == "paf1b" ~ "Pfaffenhofen 1B",
      opp == "sef" ~ "Freising",
      TRUE ~ "Other"
    ),
    heim = as.factor(heim),
    season = gsub("(\\d{2})(\\d{2})", "\\1/\\2", season),
    season = paste("Saison 20", season, sep = ""),
    season = as.factor(season),
    date = lubridate::ymd(date),
    date_ym = date - years(year(date) - 2022),
    strength = (
      opptabelle - max(teamstats_total$opptabelle)) / 
      (min(teamstats_total$opptabelle) - max(teamstats_total$opptabelle)
       )
    )

# Gegner nach Punkten sortieren
summed_points <- teamstats_total |> 
     group_by(opp) |> 
     summarise(Total_Points = sum(pts)) |> 
     arrange(desc(Total_Points)) |> 
     pull(opp)

# Gegner als Faktor mit Sortierung
teamstats_total <- teamstats_total |> 
  mutate(opp = factor(opp, levels = summed_points))

# Nach Saison Jahre angleichen für Visualisierung
for (i in 1:length(levels(teamstats_total$season))) {
  teamstats_total$date_ym[teamstats_total$season == levels(teamstats_total$season)[i]] <-
    teamstats_total$date[teamstats_total$season == levels(teamstats_total$season)[i]] %m-% years(i)
}

  
str(teamstats_total)
```

# Data Playerstats

```{r data playerstats}

playerstats_total <- read_xlsx(
  here::here("2023-bis-2025-Spielerstatistiken-R.xlsx"),
  sheet = 1
)

codebook_playerstats <- read_xlsx(
  here::here("2023-bis-2025-Spielerstatistiken-R.xlsx"),
  sheet = 2
)


head(playerstats_total)
str(playerstats_total)
```

# Data Wrangling Playerstats

```{r data-wrangling playerstats}

# Saison als Faktor
playerstats_total <- playerstats_total |> 
  mutate(
    mek2223 = as.factor(mek2223),
    mek2324 = as.factor(mek2324),
    )

# Name als Faktor mit Sortierung
teamstats_total <- teamstats_total |> 
  mutate(opp = factor(opp, levels = summed_points))
```

# Analyse

## Punkte

### Punkte pro Gegner

```{r plot-points-per-team}
max_tatal_pts_all_seasons <- teamstats_total |> 
  group_by(opp) |> 
  summarize(total_pts_all_seasons = sum(pts)) |> 
  summarise(max_total_pts_all_seasons = max(total_pts_all_seasons)) |> 
  pull()

ggplot(teamstats_total, aes(x = opp, y = pts, fill = season)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Erzielte Punkte pro Team",
       x = "Gegner",
       y = "Punkte",
       fill = "Saison") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(breaks = seq(0, max_tatal_pts_all_seasons, by = 2), limits = c(0, max_tatal_pts_all_seasons)) +
  scale_fill_colorblind()

```

```{r plot-points-per-team-asc}
ggplot(teamstats_total, aes(x = opp, y = pts, fill = season)) +
  geom_bar(stat = "summary", fun = "sum", position = "dodge", colour = "darkgrey", linewidth = 0.25) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Gegner", 
       y = "Punkte", 
       fill = "Saison") +
  scale_fill_colorblind()
```

### Punkte über Zeit

```{r plot-punke-saison, fig.asp=0.25}
ggplot(teamstats_total, aes(x = date_ym, y = pts)) +
  geom_line(linewidth = 1) +
  labs(title = "Punkte über die Saison",
       x = "Zeit",
       y = "Punkte") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Schüsse

### Schüsse über Zeit

```{r plot-schuesse-saison}
ggplot(teamstats_total, aes(x = date_ym, y = sf)) +
  geom_line(linewidth = 1) +
  labs(title = "Schüsse über die Saison",
       x = "Zeit",
       y = "Schüsse") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))

```

### Schussverteilung

```{r plot-schuesse-hist}
ggplot(teamstats_total, aes(x = sf)) +
  geom_histogram(binwidth = 4) +
  labs(title = "Schüsse",
       x = "Schüsse",
       y = "Anzahl") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Tore

### Tore über Zeit

```{r plot-tore-saison}
ggplot(teamstats_total, aes(x = date_ym, y = gf)) +
  geom_line(linewidth = 1) +
  labs(title = "Tore über die Saison",
       x = "Zeit",
       y = "Tore") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))

```

### Torverteilung

```{r plot-tore-hist}
ggplot(teamstats_total, aes(x = gf)) +
  geom_histogram(binwidth = 1) +
  labs(title = "Tore",
       x = "Tore",
       y = "Anzahl") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Schussquote

### Schussquote über Zeit

```{r plot-schussquote-zeit, fig.asp=0.25}
ggplot(teamstats_total, aes(x = date_ym, y = spct, color = season)) +
  geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison",
       x = "Zeit",
       y = "Schussquote") +
  scale_color_colorblind()
```

### Schussquote über Zeit nach Saison

```{r plot-schussquote-saison}
ggplot(teamstats_total, aes(x = date_ym, y = spct)) +
  geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison",
       x = "Zeit",
       y = "Schussquote") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

### Schussquote + Fangquote (Glück) über Zeit

```{r plot-schussquote-fangquote-saison}
ggplot(teamstats_total, aes(x = date_ym, y = pdo)) +
  geom_line(linewidth = 1) +
  geom_hline(yintercept = 1, color = "red", linetype = "dashed") +
  labs(title = "PDO: Schussquote + Fangquote",
       subtitle = "Glück > 1, Pech < 1",
       x = "Zeit",
       y = "Schussquote + Fangquote") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Tordifferenz

### Tordifferenz über Zeit

```{r plot-tordifferenz-saison}
ggplot(teamstats_total, aes(x = date_ym, y = gd)) +
  geom_line(linewidth = 1) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  labs(title = "Tordifferenz über die Saison",
       x = "Zeit",
       y = "Tordifferenz") +
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))

```

## Siege/Niederlage

```{r plot-wintype}
max_wintype_count <- 
  teamstats_total |> 
  group_by(wintype, season) |> 
  count() |> 
  ungroup() |> 
  summarise(max = max(n)) |> 
  pull()

ggplot(teamstats_total, aes(x = wintype)) +
  geom_bar() +
  labs(title = "Siege und Niederlagen nach Saison",
       x = "Typ",
       y = "Anzahl") +
  facet_grid(rows = vars(season)) +
  scale_y_continuous(breaks = seq(0, max_wintype_count, by = 2)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Zusammenhänge

### Schüsse - Tore nach Stärke Gegner

```{r}
ggplot(teamstats_total, aes(x = sf, y = gf, color = strength)) +
  geom_point() +
  scale_color_gradient(
    name = "Stärke Gegner", 
    breaks = c(min(teamstats_total$strength), max(teamstats_total$strength)), 
    labels = c("hoch", "niedrig"),
    high = "#F0E442",
    low = "#D55E00") +
  labs(title = "Schüsse und Tore",
       x = "Schüsse",
       y = "Tore") 
```

```{r}
ggplot(teamstats_total, aes(x = sf, y = gf, color = oppcat)) +
  geom_point() +
  labs(title = "Schüsse und Tore",
       x = "Schüsse",
       y = "Tore",
       color = "Stärke Gegner")
```

```{r}
ggplot(teamstats_total, aes(x = sf, y = gf)) +
  geom_point(alpha=.5) +
  labs(title = "Schüsse und Tore",
       x = "Schüsse",
       y = "Tore") +
  stat_smooth(method="glm", se=TRUE)
```

### Schussdifferenz - Tordifferenz

```{r}
ggplot(teamstats_total, aes(x = sd, y = gd, color = opptabelle)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "grey") +
  geom_vline(xintercept = 0, color = "grey") +
  labs(title = "Schussdifferenz und Tordifferenz",
       x = "Schussdifferenz",
       y = "Tordifferenz") 
```

```{r}
ggplot(teamstats_total, aes(x = sd, y = gd, color = oppcat)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "grey") +
  geom_vline(xintercept = 0, color = "grey") +
  labs(title = "Schussdifferenz und Tordifferenz",
       x = "Schussdifferenz",
       y = "Tordifferenz") 
```

```{r}
ggplot(teamstats_total, aes(x = sd, y = gd)) +
  geom_point(alpha=.5) +
  geom_hline(yintercept = 0, color = "grey") +
  geom_vline(xintercept = 0, color = "grey") +
  labs(title = "Schussdifferenz und Tordifferenz",
       x = "Schussdifferenz",
       y = "Tordifferenz") +
  stat_smooth(method="glm", se=TRUE)
```

### Schussquote - Punkte

```{r}
ggplot(teamstats_total, aes(x = spct, y = win, color = opptabelle)) +
  geom_point(alpha=.5) +
  labs(title = "Schussquote und Sieg",
       x = "Schussquote",
       y = "Sieg") 
```

```{r}
ggplot(teamstats_total, aes(x = spct, y = win, color = oppcat)) +
  geom_point(alpha=.5) +
  labs(title = "Schussquote und Sieg",
       x = "Schussquote",
       y = "Sieg") 
```

```{r}
ggplot(teamstats_total, aes(x = spct, y = win)) +
  geom_point(alpha=.5) +
  labs(title = "Schussquote und Sieg",
       x = "Schussquote",
       y = "Sieg") +
  stat_smooth(method="glm", se=TRUE, method.args = list(family=binomial))
```
