---
title: "MEK-Analyse"
author: "Laura Kiemes & Benjamin Dornow"
format: html
editor: visual
---

```{r setup}
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(
  tidyverse, ggplot2, readr, haven, readxl, here, dplyr, lubridate, patchwork
  )

here::i_am("analyze.qmd")
```

```{r data}
### Teamstats importieren

teamstats_total <- read_xlsx(
  here::here("2023-bis-2025-Teamstatistiken-R.xlsx"), 
  sheet = 1
  )

teamstats_total[1, "season"] <- 2425

### Erster Überblick

head(teamstats_total)
```

```{r data-wrangling}
### Gegner in Kategorien aufteilen

teamstats_total <- teamstats_total |> 
  mutate(
    oppcat = case_when(
      opptabelle %in% 1:2 ~ 1,
      opptabelle %in% 3:6 ~ 2,
      opptabelle %in% 7:10 ~ 3
      ),
    win = case_when(
      pts %in% 0:1 ~ 0,
      pts %in% 2:3 ~ 1,
    ),
    wintype = factor(
      pts,
      levels = c(0:3),
      labels = c("Niederlage", "Niederlage nach SO", "Sieg nach SO", "Sieg")
    ),
    oppcat = factor(
      oppcat, 
      levels = c(1:3), 
      labels = c("high", "mid", "low")
      ),
    opp = case_when(
      opp == "eva" ~ "EV Aich",
      opp == "ega" ~ "Augsburg",
      opp == "dor1b" ~ "Dorfen 1B",
      opp == "esvd" ~ "Dachau",
      opp == "esvg" ~ "Gebensbach",
      opp == "evk" ~ "Königsbrunn",
      opp == "ffb1b" ~ "FFB 1B",
      opp == "paf1b" ~ "Pfaffenhofen 1B",
      opp == "sef" ~ "Freising",
      TRUE ~ "Other"
    ),
    season = gsub("(\\d{2})(\\d{2})", "\\1/\\2", season),
    season = paste("Saison ", season, sep = ""),
    season = as.factor(season),
    date = lubridate::ymd(date),
    date_ym = date - years(year(date) - 2022)
    )

str(teamstats_total)
```

```{r plot-points-per-team}
max_tatal_pts_all_seasons <- teamstats_total |> 
  group_by(opp) |> 
  summarize(total_pts_all_seasons = sum(pts)) |> 
  summarise(max_total_pts_all_seasons = max(total_pts_all_seasons)) |> 
  pull()

ggplot(teamstats_total, aes(x = opp, y = pts, fill = season)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Erzielte Punkte pro Team",
       x = "Gegner",
       y = "Punkte",
       fill = "Saison") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(breaks = seq(0, max_tatal_pts_all_seasons, by = 2), limits = c(0, max_tatal_pts_all_seasons))
```

```{r plot-2324}
plot_time_2223 <- teamstats_total |> 
  filter(season == levels(teamstats_total$season)[1]) |> 
  ggplot(aes(x = date, y = spct)) +
    geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison 2023/2024",
       x = "Zeit",
       y = "Schussquote") +
  theme_minimal()

plot_time_2324 <- teamstats_total |> 
  filter(season == levels(teamstats_total$season)[2]) |> 
  ggplot(aes(x = date, y = spct)) +
    geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison 2022/2023",
       x = "Zeit",
       y = "Schussquote") +
  theme_minimal() 
  

plot_time_2223 + plot_time_2324 + patchwork::plot_layout(ncol = 1)


teamstats_total |> 
  mutate(date = ifelse(
    season == levels(teamstats_total$season)[1], 
    date %m+% years(1), 
    date)) |> 
  ggplot(aes(x = date, y = spct)) +
    geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison",
       x = "Zeit",
       y = "Schussquote") +
  theme_minimal() + 
  facet_grid(rows = vars(season))

ggplot(teamstats_total, aes(x = date_ym, y = spct)) +
    geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison",
       x = "Zeit",
       y = "Schussquote") +
  theme_minimal() + 
  facet_grid(rows = vars(season))
```

```{r plot-wintype}
max_wintype_count <- 
  teamstats_total |> 
  group_by(wintype, season) |> 
  count() |> 
  ungroup() |> 
  summarise(max = max(n)) |> 
  pull()

ggplot(teamstats_total, aes(x = wintype)) +
  geom_bar() +
  labs(title = "Siege und Niederlagen nach Saison",
       x = "Typ",
       y = "Anzahl") +
  facet_grid(rows = vars(season)) +
  scale_y_continuous(breaks = seq(0, max_wintype_count, by = 2)) +
  theme_minimal()
```
