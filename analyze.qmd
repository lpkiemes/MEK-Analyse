---
title: "MEK-Analyse"
author: "Laura Kiemes & Benjamin Dornow"
format: html
editor: visual
toc: true
---

# Setup

```{r setup}
if (!require("pacman")) install.packages("pacman"); library(pacman)
pacman::p_load(
  tidyverse, ggplot2, readr, haven, readxl, here, dplyr, lubridate, patchwork
  )

here::i_am("analyze.qmd")

darkyellow <- "#FAD514"
darkgrey <- "#1D1D1B"
```

# Data

```{r data}
### Teamstats importieren

teamstats_total <- read_xlsx(
  here::here("2023-bis-2025-Teamstatistiken-R.xlsx"), 
  sheet = 1
  )

# Test for two 24/25 games
# teamstats_total[1, "season"] <- 2425
# teamstats_total[1, "date"] <- 20241030
# teamstats_total[2, "season"] <- 2425
# teamstats_total[2, "date"] <- 20250105

### Erster Überblick

head(teamstats_total)
str(teamstats_total)
```

# Data Wrangling

```{r data-wrangling}
### Gegner in Kategorien aufteilen

teamstats_total <- teamstats_total |> 
  mutate(
    oppcat = case_when(
      opptabelle %in% 1:2 ~ 1,
      opptabelle %in% 3:6 ~ 2,
      opptabelle %in% 7:10 ~ 3
      ),
    win = case_when(
      pts %in% 0:1 ~ 0,
      pts %in% 2:3 ~ 1,
    ),
    wintype = factor(
      pts,
      levels = c(0:3),
      labels = c("Niederlage", "Niederlage nach SO", "Sieg nach SO", "Sieg")
    ),
    oppcat = factor(
      oppcat, 
      levels = c(1:3), 
      labels = c("high", "mid", "low")
      ),
    opp = case_when(
      opp == "eva" ~ "EV Aich",
      opp == "ega" ~ "Augsburg",
      opp == "dor1b" ~ "Dorfen 1B",
      opp == "esvd" ~ "Dachau",
      opp == "esvg" ~ "Gebensbach",
      opp == "evk" ~ "Königsbrunn",
      opp == "ffb1b" ~ "FFB 1B",
      opp == "paf1b" ~ "Pfaffenhofen 1B",
      opp == "sef" ~ "Freising",
      TRUE ~ "Other"
    ),
    heim = as.factor(heim),
    season = gsub("(\\d{2})(\\d{2})", "\\1/\\2", season),
    season = paste("Saison 20", season, sep = ""),
    season = as.factor(season),
    date = lubridate::ymd(date),
    date_ym = date - years(year(date) - 2022)
    )

for (i in 1:length(levels(teamstats_total$season))) {
  teamstats_total$date_ym[teamstats_total$season == levels(teamstats_total$season)[i]] <-
    teamstats_total$date[teamstats_total$season == levels(teamstats_total$season)[i]] %m-% years(i)
}

#i <- 3
#teamstats_total$date[teamstats_total$season == levels(teamstats_total$season)[i]] %m-% years(i)
  
  
str(teamstats_total)
```

# Analysis

## Punkte pro Gegner

```{r order-points-opponent}
summed_points <- teamstats_total |> 
     group_by(opp) |> 
     summarise(Total_Points = sum(pts)) |> 
     arrange(desc(Total_Points)) |> 
     pull(opp)

teamstats_total$opp <- factor(teamstats_total$opp, levels = summed_points)
```

```{r plot-points-per-team}
max_tatal_pts_all_seasons <- teamstats_total |> 
  group_by(opp) |> 
  summarize(total_pts_all_seasons = sum(pts)) |> 
  summarise(max_total_pts_all_seasons = max(total_pts_all_seasons)) |> 
  pull()

ggplot(teamstats_total, aes(x = opp, y = pts, fill = season)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(title = "Erzielte Punkte pro Team",
       x = "Gegner",
       y = "Punkte",
       fill = "Saison") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_y_continuous(breaks = seq(0, max_tatal_pts_all_seasons, by = 2), limits = c(0, max_tatal_pts_all_seasons))

```

```{r plot-points-per-team-asc}
ggplot(teamstats_total, aes(x = opp, y = pts, fill = season)) +
  geom_bar(stat = "summary", fun = "sum", position = "dodge", colour = darkgrey, linewidth = 0.25) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(x = "Gegner", 
       y = "Punkte", 
       fill = "Saison")
```

## Schussquote über Zeit

```{r plot-schussquote-zeit, fig.asp=0.25}
ggplot(teamstats_total, aes(x = date_ym, y = spct, color = season)) +
  geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison",
       x = "Zeit",
       y = "Schussquote") +
  theme_minimal() 
```

```{r plot-schussquote-saison}
ggplot(teamstats_total, aes(x = date_ym, y = spct)) +
  geom_line(linewidth = 1) +
  labs(title = "Schussquote über die Saison",
       x = "Zeit",
       y = "Schussquote") +
  theme_minimal() + 
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Schussquote + Fangquote (Glück)

```{r plot-schussquote-fangquote-saison}
ggplot(teamstats_total, aes(x = date_ym, y = pdo)) +
  geom_line(linewidth = 1) +
  geom_hline(yintercept = 1, color = "red", linetype = "dashed") +
  labs(title = "Schussquote + Fangquote (Glück)",
       x = "Zeit",
       y = "Schussquote + Fangquote") +
  theme_minimal() + 
  facet_grid(rows = vars(season)) +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```

## Siege/Niederlage

```{r plot-wintype}
max_wintype_count <- 
  teamstats_total |> 
  group_by(wintype, season) |> 
  count() |> 
  ungroup() |> 
  summarise(max = max(n)) |> 
  pull()

ggplot(teamstats_total, aes(x = wintype)) +
  geom_bar() +
  labs(title = "Siege und Niederlagen nach Saison",
       x = "Typ",
       y = "Anzahl") +
  facet_grid(rows = vars(season)) +
  scale_y_continuous(breaks = seq(0, max_wintype_count, by = 2)) +
  theme_minimal() +
  theme(strip.text.y = element_text(angle = 0, hjust = 1))
```
